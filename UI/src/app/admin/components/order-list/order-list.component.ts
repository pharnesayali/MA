import { HttpClient } from '@angular/common/http';
import { Component, OnInit } from '@angular/core';
import { NgxSpinnerService } from 'ngx-spinner';
import { Router } from '@angular/router';
import { AdminService } from '../../admin.service';
import { NotifierService } from 'src/app/shared/services/notifier.service';
import { DatePipe } from "@angular/common";
import { User } from 'src/app/shared/models/user';
import { OrderListActionRendererComponent } from '../../templates/order-list-action-renderer/order-list-action-renderer.component';
let PAGESIZE = 100;
declare var $: any;

@Component({
  selector: 'app-order-list',
  templateUrl: './order-list.component.html',
  styleUrls: ['./order-list.component.scss']
})
export class OrderListComponent implements OnInit {
  defaultColDef: any;
  headerHeight: number;
  rowHeight: number;
  rowSelection: string;
  rowGroupPanelShow: string;
  pageSize: number;
  paginationPageSize: number;
  orderList: any;
  selectedType: any;
  selectedYear: any;
  fromDate: any;
  toDate: any;
  minDate: Date;
  fileUploadedList: any;
  clickCount: number;
  checkedbox: boolean;
  isAllChecked: boolean;
  AllChecked: boolean;
  currentUser: User;
  // clickCount=0;
  gridApi: any;
  gridColumnApi: any;
  uploadedDate: Date;
  selectedMonth: Date;
  updatedDate = new Date();
  frameworkComponents:any;
  columnDefs = [
    {
      headerName: "Order Date",
      field: "OrderDate",
      filter: false,
      headerTooltip: "Order Date",
      width: 100,
      headerClass: 'text-center',
      editable: false,
      cellStyle: {
        textAlign: 'center'
      },
      valueFormatter: (params) => {
        if (params.value !== undefined) {
          const date = new Date(params.value);
          const datepipe: DatePipe = new DatePipe("en-US");
          return datepipe.transform(date, "dd/MM/yyyy");
        }
      },
    },
    {
      headerName: "Reference Number",
      field: "OrderNumber",
      filter: "agTextColumnFilter",
      headerTooltip: "Reference Number",
      width: 150,
      editable: false,
      headerClass: 'text-center',
      cellStyle: {
        textAlign: 'center'
      }
    },
    {
      headerName: "Generated By",
      field: "CreatedBy",
      filter: "agTextColumnFilter",
      headerTooltip: "Generated By",
      width: 80,
      editable: false,
      headerClass: 'text-center',
    },
    {
      headerName: "Week No",
      field: "WeekNumber",
      filter: "agTextColumnFilter",
      headerTooltip: "Week No",
      width: 80,
      editable: false,
      cellStyle: {
        textAlign: 'right'
      },
      headerClass: 'text-center',
    },
    {
      headerName: "Type Of Order",
      field: "OrderType",
      filter: "agTextColumnFilter",
      headerTooltip: "Type",
      width: 150,
      editable: false,
      headerClass: 'text-center',
    },
    {
      headerName: "Status",
      field: "Status",
      filter: "agTextColumnFilter",
      headerTooltip: "Status",
      width: 100,
      editable: false,
      headerClass: 'text-center',
    },
    {
      headerName: "Action",
      field: "id",
      filter: false,
      headerClass: 'text-center',
     cellRenderer:"orderListrenderer",
    //  cellRendererParams: function (params) {
    //     if (
    //       params.data !== undefined &&
    //       params.data !== null &&
    //       params.data.Status !== null &&
    //       params.data.Status !== undefined &&
    //       (params.data.Status === "Completed" ||
    //         params.data.Status === "completed")
    //     ) {
    //       return '<a class="padding-left-20 c-pointer"> <i class="fa fa-eye" aria-hidden="true" ></i></a> <br> ';
    //     }
    //   },
      width: 100,
      editable: false,
    },
  ]

  constructor(
    private spinner: NgxSpinnerService,
    private http: HttpClient,
    private router: Router,
    private adminService: AdminService,
    private notifier: NotifierService,
    private datepipe: DatePipe
  ) {
    this.defaultColDef = {
      sortable: true,
      filter: true,
      resizable: true,
    };
    const gridSize = 6;
    this.rowHeight = gridSize * 4;
    this.headerHeight = gridSize * 7;
    this.rowSelection = "multiple";
    this.rowGroupPanelShow = "always";
    this.paginationPageSize = PAGESIZE;
    this.pageSize = 1;
    this.selectedMonth = new Date()
    this.minDate = new Date();
    this.fileUploadedList = [];
    this.checkedbox = false;
    // const datepipe: DatePipe = new DatePipe('en-US');
    let date = new Date();
    this.toDate = this.datepipe.transform(date, 'yyyy-MM-dd');
    this.fromDate = new Date(new Date().setMonth(new Date().getMonth() - 3));
    this.clickCount = 0;
    this.currentUser = JSON.parse(sessionStorage.getItem('ActiveUser'));
    //this.toDate = datepipe.transform(new Date(), 'MM-YYYY');
    //   date = new Date(new Date().setMonth(new Date().getMonth() - 3));
    //  this.fromDate = datepipe.transform(date, 'MM-YYYY')
    this.frameworkComponents= {
      orderListrenderer : OrderListActionRendererComponent
    }
  }

  onGridReady(params) {
    this.gridApi = params.api;
    this.gridColumnApi = params.columnApi;
    this.gridApi.sizeColumnsToFit();
  }
  ngOnInit(): void {
    this.getOrderList();
    this.getFileUploadedDetails();
  }

  onGridChange(params) {
    params.api.sizeColumnsToFit();
  }
  getOrderList() {
    // const data = {
    //   PageCriteria: {
    //     PageNumberToFetch: 1,
    //     PageSize: 50
    //   },
    //   From: this.fromDate,
    //   To: this.toDate
    // }
    // let date=new Date()
    const data = {
      PageCriteria: {
        PageNumberToFetch: 1,
        PageSize: 50
      },
      BuyerCode: this.currentUser.EmployeeCode,
      From: this.datepipe.transform(this.fromDate, 'yyyy-MM-dd'),
      To: this.datepipe.transform(this.toDate, 'yyyy-MM-dd')
    }
    this.spinner.show();
    // this.http.get<any>("http://localhost:3000/orderList").subscribe(res => {
    this.adminService.getOrderList(data).subscribe(res => {
      if (res.Message) {
        //this.notifier.notify(res.Message, 1);
        this.orderList = [];
        this.spinner.hide();
      }
      else
        if (res && !res.message) {
          this.orderList = res.OrderList;
          this.spinner.hide();
        }
        else {
          this.spinner.hide();
        }
    },
      (err) => {
        this.spinner.hide();
        //  this.notifier.notify(err.message, 4);
      })
  }

  apply() {
    this.getOrderList();
  }

  onCellClicked(event) {
    if (event !== null &&
      event !== undefined &&
      event.colDef !== null &&
      event.colDef !== undefined &&
      event.colDef.headerName !== null &&
      event.colDef.headerName !== undefined &&
      event.colDef.headerName === "Action") {
      if (event.data !== null &&
        event.data !== undefined &&
        event.data.Status !== null &&
        event.data.Status !== undefined &&
        (event.data.Status === "completed" ||
          event.data.Status === "Completed"
        )
      ) {
        this.router.navigate(['/admin/viewOrder'], {
          queryParams: {
            OrderNumber: event.data.ID,
            OrderType: event.data.OrderType
          }
        });
        //  this.selectedType = event.data.type;
        //   this.adminService.getSelectedType(this.selectedType)
      }
    }
  }

  generateOrder() {
    $(".order-list, .common-bg").hide();
    this.checkedbox = false;
    this.router.navigate(['/admin/generateOrder']);
  }

  getData() {
    // this.router.navigate(["/key-data"]);
    this.uploadedDate = new Date();
    $(".order-list, .common-bg").show();
    document.getElementById('last-updated-order-generation-data').style.display = 'block';
  }

  closeModal() {
    $(".order-list, .common-bg").hide();
    this.isAllChecked = false;
    this.AllChecked = false;
    this.checkedbox = false;
    this.clickCount = 0
    document.getElementById('last-updated-order-generation-data').style.display = 'none';
  }

  onOpenYearCalendar(container) {
    container.yearSelectHandler = (event: any): void => {
      container._store.dispatch(container._actions.select(event.date));
    };
    container.setViewMode("month");
  }

  reset() {
    this.fromDate = null;
    this.toDate = null;
  }

  getFileUploadedDetails() {
    this.adminService.getFileUploadedDate().subscribe(
      (res) => {
        if (res) {
          this.fileUploadedList = res.Result.Result;
        }
      })
  }

  onChangeChecked(Index: any, event: any) {
    if (event === true) {
      this.clickCount++;
    }
    if (event === false) {
      this.clickCount--;
    }
    if (this.clickCount >= this.fileUploadedList.length) {
      this.checkedbox = true;
      this.AllChecked = true;
    }
    else if (event === true) {
      //this.AllChecked = true;
      // this.isAllChecked=true;
      this.checkedbox = true;
    }
    else if (event === false) {
      this.AllChecked = false;
      // this.isAllChecked = false;
      this.checkedbox = false;
    }
    else {
      this.AllChecked = false;
      this.checkedbox = false;
    }
  }

  checkAll(event: any) {
    // this.fileUploadedList.forEach((x) => (x.state = event.target.checked));
    if (event === true) {
      this.isAllChecked = true;
      this.AllChecked = true;
      this.checkedbox = true;
      this.clickCount = this.fileUploadedList.length;
    }
    else {
      this.AllChecked = false;
      this.isAllChecked = false;
      this.checkedbox = false;
      this.clickCount = 0;
    }
  }
}

